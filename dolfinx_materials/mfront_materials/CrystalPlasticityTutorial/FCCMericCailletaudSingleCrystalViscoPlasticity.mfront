@DSL Implicit;
@Behaviour FCCMericCailletaudSingleCrystalViscoPlasticity;
@Author Thomas Helfer, Jean-Michel Scherer;
@Date 02 / 11 / 2022;
@Description {
}

@ModellingHypothesis Tridimensional;
@OrthotropicBehaviour;

@Algorithm NewtonRaphson;
@Epsilon 1.e-14;
@Theta 1;

@Brick StandardElasticity{
/*
  young_modulus: 1.0,
  poisson_ratio: 0.3
*/
  young_modulus1 : "E",
  young_modulus2 : "E",
  young_modulus3 : "E",
  poisson_ratio12 : "nu",
  poisson_ratio23 : "nu",
  poisson_ratio13 : "nu",
  shear_modulus12 : "G",
  shear_modulus23 : "G",
  shear_modulus13 : "G"
};

@CrystalStructure FCC;
@SlipSystem<0, 1, -1>{1, 1, 1};
@InteractionMatrix{1, 0., 0., 0., 0., 0., 0.};

@MaterialProperty real E;
@MaterialProperty real nu;
@MaterialProperty real G;
@MaterialProperty real n;
@MaterialProperty real K;
@MaterialProperty real Q;
@MaterialProperty real b;
@MaterialProperty real tau0;
@MaterialProperty real d;
@MaterialProperty real C;

@StateVariable strain g[Nss];
g.setEntryName("PlasticSlip");

@AuxiliaryStateVariable strain p[Nss];
p.setEntryName("EquivalentViscoplasticSlip");

@AuxiliaryStateVariable strain a[Nss];
a.setEntryName("BackStrain");

@AuxiliaryStateVariable stress tau[Nss];
tau.setEntryName("ResolvedShearStress");

@AuxiliaryStateVariable Stensor epl;
epl.setGlossaryName("PlasticStrain");

@Integrator {
  using size_type = unsigned short;
  const auto& ss = FCCMericCailletaudSingleCrystalViscoPlasticitySlipSystems<real>::getSlipSystems();
  const auto& m = ss.him;
  //constexpr const auto eeps = 1.e-12;
  //const auto seps = eeps * D(0, 0);
  real exp_bp[Nss];
  for (size_type i = 0; i != Nss; ++i) {
      const auto p_ = p[i] + theta * abs(dg[i]);
      exp_bp[i] = exp(-b * p_);
  }
  for (size_type i = 0; i != Nss; ++i) {
    tau[i] = sig | ss.mus[i];
    auto r = tau0;
    for (size_type j = 0; j != Nss; ++j) {
      r += Q * m(i, j) * (1 - exp_bp[j]);
    }
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    const auto x = C * (a[i] + theta * da);
    const auto f = max(abs(tau[i] - x) - r, stress(0));
    cout << abs(tau[i] - x) - r << endl;
//    if (f > 1.1 * K) {
//      return false;
//    }
    const auto sgn = tau[i] - x > 0 ? 1 : -1;
    // elasticity
    feel += dg[i] * ss.mus[i];
    dfeel_ddg(i) = ss.mus[i];
    // viscoplasticity
    const auto v = pow(f / K, n);
    const auto dv = (n / K) * pow(f / K, n - 1);
    fg[i] -= dt * v * sgn;
    dfg_ddeel(i) = -dt * dv * theta * (ss.mus[i] | D);
    const auto sgn_gi = dg(i) > 0 ? 1 : -1;
    const auto dda_ddg =
        (1 - d * a[i] * sgn_gi) / (power<2>(1 + theta * d * abs(dg[i])));
    dfg_ddg(i, i) += dt * dv * C * theta * dda_ddg;
    for (size_type j = 0; j != Nss; ++j) {
      const auto sgn_gj = dg(j) > 0 ? 1 : -1;
      const auto dr = Q * m(i, j) * theta * b * exp_bp[j] * sgn_gj;
      dfg_ddg(i, j) += dt * dv * dr * sgn;
    }
  }
}

@UpdateAuxiliaryStateVariables {
  using size_type = unsigned short;
  for (size_type i = 0; i != Nss; ++i) {
    p[i] += abs(dg[i]);
    const auto da =  //
        (dg[i] - d * a[i] * abs(dg[i])) / (1 + theta * d * abs(dg[i]));
    a[i] += da;
  }
  epl = (eto+deto) - (eel+deel);
}

@TangentOperator{
  Stensor4 iJe;
  getPartialJacobianInvert(iJe);
  Dt = D * iJe;
}

@DissipatedEnergy{
  using size_type = unsigned short;
  for (size_type i = 0; i != Nss; ++i) {
    Psi_d += tau[i] * dg[i];
  }
}

@InternalEnergy {
  Psi_s = 0.5 * (sig | eel);
}
